---
title: "Introduction to Code Blocks"
description: "This is my reading note about features of code blocks in Quarto."
---

## Code Blocks with Plain Text

For non-executable code blocks (e.g. output of a code, text from the man page, etc.), use the `default` indicator. 

```default
This is a plain text.
```

## Raw `HTML`, `Latex` code

Use the `{=language_name}` syntax. This can also be used for inline code. Learn more from [the documentation](https://quarto.org/docs/authoring/markdown-basics.html#raw-content).

## Language Support

> Pandoc supports syntax highlighting for over 140 different languages.

::: {.callout-important}
Note that sometimes you need to install `jupyter` in order to render code that is written in other languages, such as Python and Bash.
:::

## Code Blocks can be treated as CSS Elements

Code blocks of the same language highlight share the same CSS class, thus you can apply your own style format for code of different language. Learn more from [the documentation](https://quarto.org/docs/authoring/markdown-basics.html#source-code).

You can also add customized class to a code block and adjusted its style individually, which is discussed in [this Stack Overflow discussion](https://stackoverflow.com/a/74026889).

## Code Execution Options

Code execution options can be used when you want to, e.g., regulate the code output, hide the code piece, and so on. Read [the official guide about execution options](https://quarto.org/docs/computations/execution-options.html) for more detail.

## Interactive Code Annotations

Interactive code annotation is a combination of inline comment and bullet points. The display of code annotation can be controled by the variable `code-annotations`, which contains the following options: 

* below (default)
* hover
* select
* none

Below is an example of using code annotation from [the official guide about code annotation](https://quarto.org/docs/authoring/code-annotation.html).

```{r load packages}
#| echo: false
#| output: false

# (install &) load packages
pacman::p_load(
    conflicted,
    tidyverse
)

# handle function conflicts
conflicts_prefer(dplyr::filter)
conflicts_prefer(dplyr::lag)
```

```{r load data with annotation}
pacman::p_load(palmerpenguins)
penguins |> # <1>
    mutate( # <2>
        bill_ratio = bill_depth_mm / bill_length_mm, # <2>
        bill_area  = bill_depth_mm * bill_length_mm # <2>
    ) # <2>
```

1. Take `penguins`, and then,
2. add new columns for the bill ratio and bill area.
