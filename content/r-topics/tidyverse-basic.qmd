---
title: "Brief Introduction to `{tidyverse}`"
description: "This is my reading note about some common functions in the `{tidyverse}` package"
---

## Tibble

### Why `tibble`?

The benefits of using `tibble` over `data.frame` are:

1. It tells the data type of each column.
2. Instead of printing all the data, it only prints a limited numbers of rows and columns, so that the console won't be flouded by too many text.
3. Missing values and negative values are printed in red.

### Load a `data.frame` as a `tibble`

```{r as tibble}
pacman::p_load(tidyverse)
tbl <- as_tibble(PlantGrowth)
```

### Print a `tibble`

By default it prints 10 rows.

```{r print 10 rows}
print(tbl) # To 10 rows
```

To print more rows you can:
```{r print more rows}
print(tbl, n = 20) # To 20 rows
print(tbl, n = Inf) # To print all rows
```

### Load external data as a `tibble`

To import from a csv file, you can:

```{r}
#| eval: false

read.csv(path_to_csv) # base R import as data.frame
read_csv(path_to_csv) # load as `tidyverse::tibble` 
```

Note that you can also read data from online

```{r}
read_csv("https://raw.githubusercontent.com/SchmidtPaul/dsfair_quarto/master/data/DrinksPeterMax.csv")
```

### Transform a `tibble` into a `data.frame`

```{r}
tbl %>% as.data.frame()
```

## `mutate()`

```{r}
tbl2 <- head(tbl)
```

baseR

```{r}
tbl2$new <- tbl2$weight + 2
```

Create new column

```{r}
tbl2 <- tbl2 %>% mutate(new = weight + 2)
```

Replace the value in-place

```{r}
tbl2 <- tbl2 %>% mutate(weight = weight + 2)
```


The backtick:
when export to excel, the backtick won't shown in the excel file.

```{r}
tbl2 %>%
    mutate(
    `Name with space` = "Hello!", 
    number10 = 10
    )
```

For the 3

```{r}
tbl2 %>%
  mutate(v1 = 1, v2 = 2, v3 = 3) %>%
  mutate(
    across(starts_with("v"), ~ .x + 20))
```

## `select()`

```{r}
tbl3 <- tbl2 %>% 
    mutate(var1 = 1, var2 = 2, var3 = "text", var4 = "word")
tbl3
```


```{r}
tbl3 %>% 
    select(group, var1, var4)
```

```{r}
tbl3 %>% 
    select(group, var1:var4)
```

```{r}
tbl3 %>% 
    select(-group)
```

```{r}
tbl3 %>% 
    select(where(is.numeric))
```

Select *literally* everything but move the column `var` to the front.
```{r}
tbl3 %>% 
    select(var1, everything())
```

## `filter()`

```{r}
tbl %>% 
  filter(weight > 6 & group == "trt2")
```

```{r}
tbl %>% 
  filter(weight > 6 | weight < 4)
```

Now we want to keep only trt1 and trt2 observations

Option 1:

```{r}
tbl %>% 
  filter(group == "trt1" | group == "trt2")
```

Option 2:

```{r}
tbl %>% 
  filter(group %in% c("trt1", "trt2"))
```

Option 3:

```{r}
tbl %>% 
  filter(group != "ctrl")
```

```{r}
tbl %>% 
  filter(weight > mean(weight))
```

## `arrange()`

Firstly we gather the data. Note that we make use of `slice()`, whose function is to select data of discrete ranges.

```{r}
tbl4 <- tbl %>%
  slice(1:3, 11:13, 21:23) 
# this keeps only rows 1,2,3,11,12,13,21,22,23
```

Sort by weight (default: ascending)

```{r}
tbl4 %>%
  arrange(weight) 
```

Sort by weight, but descending:

```{r}
tbl4 %>%
  arrange(desc(weight))
```

Firslty sort by "group". Within each "group" we sort by "weight".  

```{r}
tbl4 %>%
  arrange(group, weight)
```

Custom order (e.g. sort not alphabetically):

```{r}
myorder <- c("trt1", "ctrl", "trt2")

tbl4 %>% 
  arrange(
    match(group, myorder), 
    weight
  )
```

## `summarise()`

```{r}
tbl %>% 
  # no group_by 
  summarise(my_mean = mean(weight))
```
But why not use the built-in `mean()` function? (i.e. in this case `mean(tbl$weight)`).

But `summary()` shines when combining with other functions. E.g. we can get the mean of each control groups:
```{r}
tbl %>% 
  group_by(group) %>% 
  summarise(my_mean = mean(weight))
```

We can also elaborate by combining with multiple functions:

```{r}
tbl %>% 
  group_by(group) %>% 
  summarise(
    Mean = mean(weight),
    StdDev = sd(weight),
    Min = min(weight),
    Median = median(weight),
    Max = max(weight),
    n_Obs = n(),
  )
```

We can even group by more than one groups

```{r}
tbl %>% 
  mutate(larger5 = case_when(
    weight > 5 ~ "yes",
    weight < 5 ~ "no"
  )) %>% 
  group_by(group, larger5) %>% 
  summarise(
    n_Obs = n(),
    Mean = mean(weight)
  )
```
